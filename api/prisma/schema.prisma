// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// M = “Masculino” | F = “Feminino” | O = “outros"
enum GenderOptions {
  M
  F
  O
}

// A = admin | U = user
enum RoleOptions {
  A
  U
}

// R = role-playing-game | W = Wargaming Table | B = Board Gaming Table
enum TabletopType {
  R
  W
  B
}

// B = Iniciante | I = Intermediario | A = Avançado
enum TabletopExpertise {
  B
  I
  A
}

// O = One - shot | S = semanal | Q = Quinzenal | M = mensal
enum TabletopCadence {
  O
  S
  Q
  M
}

model User {
  id                       String         @id @default(uuid()) @db.VarChar(50)
  name                     String?        @db.VarChar(100)
  nickname                 String?        @db.VarChar(50)
  bio                      String?        @db.VarChar(1000)
  gender                   GenderOptions?
  email                    String         @db.VarChar(100)
  password                 String         @db.VarChar(100)
  avatarUrl                String?        @map("avatar_url") @db.VarChar(1000)
  cityId                   String?        @map("city_id") @db.VarChar(20)
  countryId                String?        @map("country_id") @db.VarChar(20)
  birthdate                DateTime?
  registrationValidateCode String?        @map("registration_validate_code")
  registrationValidatedAt  DateTime?      @map("registration_validated_at")
  registrationCompletedAt  DateTime?      @map("registration_completed_at")
  role                     RoleOptions?
  createdAt                DateTime       @default(now()) @map("created_at")
  updatedAt                DateTime?      @updatedAt @map("updated_at")

  city    City?    @relation(fields: [cityId], references: [id])
  country Country? @relation(fields: [countryId], references: [id])

  friendshipRequester UserFriends[]         @relation("FriendshipRequester")
  friendshipReceiver  UserFriends[]         @relation("FriendshipReceiver")
  requestsSent        UserFriendsRequests[] @relation("RequestsSent")
  requestsReceived    UserFriendsRequests[] @relation("RequestsReceived")

  userChat     ChatUsers[]
  message      ChatMessage[]
  messageViews ChatMessageViews[]

  tabletopUsers                      TabletopUsers[]
  tabletopEntryRequests              TabletopEntryRequests[]
  tabletopSchedulePlayerAvailability TabletopSchedulePlayerAvailability[]
  Tabletop                           Tabletop[]

  @@index([id, email])
  @@map("users")
}

model UserFriends {
  id                  String    @id @default(uuid()) @db.VarChar(50)
  requesterId         String    @map("requester_id") @db.VarChar(50)
  receiverId          String    @map("receiver_id") @db.VarChar(50)
  friendshipStartDate DateTime? @map("friendship_start_date")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")

  requester User @relation("FriendshipRequester", fields: [requesterId], references: [id])
  receiver  User @relation("FriendshipReceiver", fields: [receiverId], references: [id])

  @@index([requesterId, receiverId])
  @@map("users_friends")
}

model UserFriendsRequests {
  id          String    @id @default(uuid()) @db.VarChar(50)
  requesterId String    @map("requester_id") @db.VarChar(50)
  receiverId  String    @map("receiver_id") @db.VarChar(50)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  requester User @relation("RequestsSent", fields: [requesterId], references: [id])
  receiver  User @relation("RequestsReceived", fields: [receiverId], references: [id])

  @@index([requesterId, receiverId])
  @@map("users_friends_requests")
}

model Chat {
  id        String   @id @default(uuid()) @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  chatUsers ChatUsers[]
  message   ChatMessage[]

  @@map("chats")
}

model ChatUsers {
  chatId    String   @map("chat_id") @db.VarChar(50)
  userId    String   @map("user_id") @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  user User  @relation(fields: [userId], references: [id])
  chat Chat? @relation(fields: [chatId], references: [id])

  @@id([chatId, userId])
  @@index([userId])
  @@map("users_chats")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  chatId    String   @db.VarChar(50)
  senderId  String   @map("sender_id") @db.VarChar(50)
  content   String?
  imageUrl  String?
  createdAt DateTime @default(now())

  chat       Chat @relation(fields: [chatId], references: [id])
  senderUser User @relation(fields: [senderId], references: [id])

  messageViews ChatMessageViews[]

  @@index([senderId, content, chatId])
  @@map("chat_messages")
}

model ChatMessageViews {
  id        Int      @id @default(autoincrement())
  messageId Int      @map("message_id")
  viewerId  String   @map("viewer_id") @db.VarChar(50)
  createdAt DateTime @default(now())

  message ChatMessage @relation(fields: [messageId], references: [id])
  viewer  User        @relation(fields: [viewerId], references: [id])

  @@map("chat_messages_views")
}

model Tabletop {
  id               String             @id @default(uuid()) @db.VarChar(50)
  ownerId          String             @map("owner_id") @db.VarChar(50)
  name             String?            @db.VarChar(100)
  description      String?            @db.VarChar(500)
  playersLimit     Int?               @map("players_limit") @db.SmallInt()
  tabletopSystemId String?            @map("tabletop_system_id") @db.VarChar(50)
  expertiseLevel   TabletopExpertise? @map("expertise_level")
  cadence          TabletopCadence?
  avatarId         String?            @map("avatar_id") @db.VarChar(1000)
  coverId          String?            @map("cover_id") @db.VarChar(1000)
  minAge           Int?               @map("min_age") @db.SmallInt()
  hasDungeonMaster Boolean?           @map("has_dungeon_master")
  type             TabletopType?
  online           Boolean?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime?          @updatedAt @map("updated_at")

  owner User @relation(fields: [ownerId], references: [id])

  tabletopSystem TabletopSystem? @relation(fields: [tabletopSystemId], references: [id])

  tabletopUsers         TabletopUsers[]
  tabletopEntryRequests TabletopEntryRequests[]

  tabletopLocation TabletopLocation[]
  tabletopSchedule TabletopSchedule[]

  @@index([ownerId, playersLimit, tabletopSystemId, type, minAge])
  @@map("tabletop")
}

model TabletopUsers {
  tabletopId String   @map("tabletop_id") @db.VarChar(50)
  userId     String   @map("user_id") @db.VarChar(50)
  gameMaster Boolean? @map("game_master")
  createdAt  DateTime @default(now()) @map("created_at")

  tabletop Tabletop @relation(fields: [tabletopId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([tabletopId, userId])
  @@map("tabletop_users")
}

model TabletopEntryRequests {
  tabletopId String   @map("tabletop_id") @db.VarChar(50)
  userId     String   @map("user_id") @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at")

  tabletop Tabletop @relation(fields: [tabletopId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([tabletopId, userId])
  @@map("tabletop_entry_requests")
}

model TabletopSchedule {
  id               String    @id @default(uuid()) @db.VarChar(50)
  tabletopId       String    @map("tabletop_id") @db.VarChar(50)
  dayOfWeek        Int?      @map("day_of_week")
  startTimeMinutes Int?      @map("start_time_minutes")
  endTimeMinutes   Int?      @map("end_time_minutes")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  tabletop                           Tabletop                             @relation(fields: [tabletopId], references: [id])
  tabletopSchedulePlayerAvailability TabletopSchedulePlayerAvailability[]

  @@index([tabletopId, dayOfWeek])
  @@map("tabletop_schedule")
}

model TabletopSchedulePlayerAvailability {
  id           Int       @id @default(autoincrement())
  scheduleId   String    @map("schedule_id") @db.VarChar(50)
  userId       String    @map("user_id")
  availability Boolean?
  observation  String?   @db.VarChar(500)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  tabletopSchedule TabletopSchedule @relation(fields: [scheduleId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@index([scheduleId, userId])
  @@map("tabletop_schedule_player_availability")
}

model TabletopLocation {
  id           String  @id @default(uuid()) @db.VarChar(50)
  tabletopId   String  @map("tabletop_id") @db.VarChar(50)
  postalCode   String? @map("postal_code") @db.VarChar(20)
  cityId       String? @map("city_id") @db.VarChar(20)
  countryId    String? @map("country_id") @db.VarChar(20)
  streetName   String? @map("street_name") @db.VarChar(20)
  streetNumber String? @map("street_number") @db.VarChar(10)
  neighborhood String? @db.VarChar(200)
  latitude     Float?
  longitude    Float?

  city     City?    @relation(fields: [cityId], references: [id])
  country  Country? @relation(fields: [countryId], references: [id])
  tabletop Tabletop @relation(fields: [tabletopId], references: [id])

  @@map("tabletop_location")
}

model TabletopSystem {
  id       String     @id @default(uuid()) @db.VarChar(50)
  name     String     @db.VarChar(100)
  Tabletop Tabletop[]

  @@map("tabletop_system")
}

model City {
  id        String @id @db.VarChar(20)
  uf        String @db.VarChar(2)
  name      String @db.VarChar(100)
  countryId String @db.VarChar(20)

  state   State   @relation(fields: [uf], references: [uf])
  country Country @relation(fields: [countryId], references: [id])

  user             User[]
  tabletopLocation TabletopLocation[]

  @@index([id, uf])
  @@map("cities")
}

model State {
  id   String @id @db.VarChar(20)
  uf   String @unique @db.VarChar(2)
  name String @db.VarChar(100)

  city City[]

  @@index([uf])
  @@map("states")
}

model Country {
  id   String @id @db.VarChar(20)
  name String @db.VarChar(100)

  user             User[]
  city             City[]
  tabletopLocation TabletopLocation[]

  @@map("countries")
}
