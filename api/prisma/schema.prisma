// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GenderOptions {
  MALE
  FEMALE
  OTHER
}

enum RoleOptions {
  ADMIN
  USER
}

enum TabletopCommunicationType {
  VIDEO_VOIP
  VOIP
  TEXT
}

enum TabletopExpertise {
  BEGINNER
  INTERMEDIARY
  ADVANCED
}

enum TabletopCadence {
  ONE_SHOT
  WEEKLY
  FORTWEEKLY
  MONTHLY
}

enum FileType {
  IMAGE
  VIDEO
  OTHER
}

enum AccountProvider {
  GOOGLE
  CREDENTIALS
}

enum TokenType {
  VALIDATE_ACCOUNT
}

model Player {
  id                      String         @id @default(uuid()) @db.VarChar(50)
  name                    String?        @db.VarChar(100)
  nickname                String?        @db.VarChar(50)
  bio                     String?        @db.VarChar(1000)
  gender                  GenderOptions?
  email                   String         @db.VarChar(100)
  password                String?        @db.VarChar(100)
  avatarFileId            String?        @map("avatar_file_id")
  cityId                  String?        @map("city_id") @db.VarChar(20)
  countryId               String?        @map("country_id") @db.VarChar(20)
  birthdate               DateTime?
  registrationValidatedAt DateTime?      @map("registration_validated_at")
  registrationCompletedAt DateTime?      @map("registration_completed_at")
  role                    RoleOptions?
  createdAt               DateTime       @default(now()) @map("created_at")
  updatedAt               DateTime?      @updatedAt @map("updated_at")

  city    City?    @relation(fields: [cityId], references: [id])
  country Country? @relation(fields: [countryId], references: [id])

  friendshipRequester PlayerFriends[]         @relation("FriendshipRequester")
  friendshipReceiver  PlayerFriends[]         @relation("FriendshipReceiver")
  requestsSent        PlayerFriendsRequests[] @relation("RequestsSent")
  requestsReceived    PlayerFriendsRequests[] @relation("RequestsReceived")

  playerChat   ChatPlayers[]
  message      ChatMessage[]
  messageViews ChatMessageViews[]

  tabletopPlayers                    TabletopPlayers[]
  tabletopEntryRequests              TabletopEntryRequests[]
  tabletopSchedulePlayerAvailability TabletopSchedulePlayerAvailability[]
  tabletop                           Tabletop[]

  avatarFile Files? @relation(fields: [avatarFileId], references: [key])

  playerLanguage PlayerLanguage[]

  account Account[]
  Token   Token[]

  @@index([id, email])
  @@map("players")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String?         @unique @map("provider_account_id")

  player   Player @relation(fields: [playerId], references: [id])
  playerId String @map("player_id")

  @@unique([provider, playerId])
  @@map("accounts")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId String @map("player_id")

  @@map("tokens")
}

model PlayerFriends {
  id                  Int       @id @default(autoincrement())
  requesterId         String    @map("requester_id") @db.VarChar(50)
  receiverId          String    @map("receiver_id") @db.VarChar(50)
  friendshipStartDate DateTime? @map("friendship_start_date")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")

  requester Player @relation("FriendshipRequester", fields: [requesterId], references: [id])
  receiver  Player @relation("FriendshipReceiver", fields: [receiverId], references: [id])

  @@index([requesterId, receiverId])
  @@map("players_friends")
}

model PlayerFriendsRequests {
  id          Int       @id @default(autoincrement())
  requesterId String    @map("requester_id") @db.VarChar(50)
  receiverId  String    @map("receiver_id") @db.VarChar(50)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  requester Player @relation("RequestsSent", fields: [requesterId], references: [id])
  receiver  Player @relation("RequestsReceived", fields: [receiverId], references: [id])

  @@index([requesterId, receiverId])
  @@map("players_friends_requests")
}

model PlayerLanguage {
  id         Int    @id @default(autoincrement())
  playerId   String @map("player_id") @db.VarChar(50)
  languageId Int    @map("language_id")

  player   Player   @relation(fields: [playerId], references: [id])
  language Language @relation(fields: [languageId], references: [id])

  @@map("players_language")
}

model Chat {
  id        String   @id @default(uuid()) @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  chatPlayers ChatPlayers[]
  message     ChatMessage[]

  @@map("chats")
}

model ChatPlayers {
  id        Int      @id @default(autoincrement())
  chatId    String   @map("chat_id") @db.VarChar(50)
  playerId  String   @map("player_id") @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  player Player @relation(fields: [playerId], references: [id])
  chat   Chat?  @relation(fields: [chatId], references: [id])

  @@index([playerId, chatId])
  @@map("players_chats")
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  chatId      String   @db.VarChar(50)
  senderId    String   @map("sender_id") @db.VarChar(50)
  content     String?
  imageFileId Int?     @map("image_file_id")
  imageUrl    String?
  createdAt   DateTime @default(now())

  chat         Chat   @relation(fields: [chatId], references: [id])
  senderPlayer Player @relation(fields: [senderId], references: [id])

  messageViews ChatMessageViews[]

  messageFile Files? @relation(fields: [imageFileId], references: [id])

  @@index([senderId, content, chatId])
  @@map("chat_messages")
}

model ChatMessageViews {
  id        Int      @id @default(autoincrement())
  messageId Int      @map("message_id")
  viewerId  String   @map("viewer_id") @db.VarChar(50)
  createdAt DateTime @default(now())

  message ChatMessage @relation(fields: [messageId], references: [id])
  viewer  Player      @relation(fields: [viewerId], references: [id])

  @@map("chat_messages_views")
}

model Tabletop {
  id                String                     @id @default(uuid()) @db.VarChar(50)
  ownerId           String                     @map("owner_id") @db.VarChar(50)
  name              String?                    @db.VarChar(100)
  slug              String                     @unique @db.VarChar(100)
  description       String?                    @db.VarChar(500)
  playersLimit      Int?                       @map("players_limit") @db.SmallInt()
  tabletopTypeId    Int?                       @map("tabletop_type_id")
  tabletopSystemId  Int?                       @map("tabletop_system_id")
  expertiseLevel    TabletopExpertise?         @map("expertise_level")
  cadence           TabletopCadence?
  avatarFileId      String?                    @map("avatar_file_id")
  coverFileId       String?                    @map("cover_file_id")
  minAge            Int?                       @map("min_age") @db.SmallInt()
  hasDungeonMaster  Boolean?                   @map("has_dungeon_master")
  communication     TabletopCommunicationType?
  onlinePlataformId Int?                       @map("online_plataform_id")
  timezoneId        Int?                       @map("timezone_id")
  online            Boolean?
  createdAt         DateTime                   @default(now()) @map("created_at")
  updatedAt         DateTime?                  @updatedAt @map("updated_at")

  owner Player @relation(fields: [ownerId], references: [id])

  tabletopType   TabletopType?   @relation(fields: [tabletopTypeId], references: [id])
  tabletopSystem TabletopSystem? @relation(fields: [tabletopSystemId], references: [id])

  tabletopPlayers       TabletopPlayers[]
  tabletopEntryRequests TabletopEntryRequests[]

  tabletopLocation TabletopLocation[]
  tabletopSchedule TabletopSchedule[]

  avatarFile Files? @relation("avatarFile", fields: [avatarFileId], references: [key])
  coverFile  Files? @relation("coverFile", fields: [coverFileId], references: [key])

  tabletopLanguage TabletopLanguage[]

  onlinePlataform OnlineGamePlataform? @relation(fields: [onlinePlataformId], references: [id])
  timezone        Timezone?            @relation(fields: [timezoneId], references: [id])

  @@index([ownerId, playersLimit, tabletopSystemId, tabletopTypeId, minAge])
  @@map("tabletop")
}

model TabletopPlayers {
  id         Int      @id @default(autoincrement())
  tabletopId String   @map("tabletop_id") @db.VarChar(50)
  playerId   String   @map("player_id") @db.VarChar(50)
  gameMaster Boolean? @map("game_master")
  createdAt  DateTime @default(now()) @map("created_at")

  tabletop Tabletop @relation(fields: [tabletopId], references: [id])
  player   Player   @relation(fields: [playerId], references: [id])

  @@map("tabletop_players")
}

model TabletopEntryRequests {
  id         Int      @id @default(autoincrement())
  tabletopId String   @map("tabletop_id") @db.VarChar(50)
  playerId   String   @map("player_id") @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at")

  tabletop Tabletop @relation(fields: [tabletopId], references: [id])
  player   Player   @relation(fields: [playerId], references: [id])

  @@map("tabletop_entry_requests")
}

model TabletopSchedule {
  id               String    @id @default(uuid()) @db.VarChar(50)
  tabletopId       String    @map("tabletop_id") @db.VarChar(50)
  dayOfWeek        Int?      @map("day_of_week")
  startTimeMinutes Int?      @map("start_time_minutes")
  endTimeMinutes   Int?      @map("end_time_minutes")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  tabletop                           Tabletop                             @relation(fields: [tabletopId], references: [id])
  tabletopSchedulePlayerAvailability TabletopSchedulePlayerAvailability[]

  @@index([tabletopId, dayOfWeek])
  @@map("tabletop_schedule")
}

model TabletopSchedulePlayerAvailability {
  id           Int       @id @default(autoincrement())
  scheduleId   String    @map("schedule_id") @db.VarChar(50)
  playerId     String    @map("player_id")
  availability Boolean?
  observation  String?   @db.VarChar(500)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  tabletopSchedule TabletopSchedule @relation(fields: [scheduleId], references: [id])
  player           Player           @relation(fields: [playerId], references: [id])

  @@index([scheduleId, playerId])
  @@map("tabletop_schedule_player_availability")
}

model TabletopLocation {
  id           String  @id @default(uuid()) @db.VarChar(50)
  tabletopId   String  @map("tabletop_id") @db.VarChar(50)
  postalCode   String? @map("postal_code") @db.VarChar(20)
  title        String?
  cityId       String? @map("city_id") @db.VarChar(20)
  stateId      String? @map("state_id") @db.VarChar(20)
  countryId    String? @map("country_id") @db.VarChar(20)
  streetName   String? @map("street_name")
  streetNumber String? @map("street_number")
  neighborhood String?
  latitude     Float?
  longitude    Float?

  city     City?    @relation(fields: [cityId], references: [id])
  state    State?   @relation(fields: [stateId], references: [id])
  country  Country? @relation(fields: [countryId], references: [id])
  tabletop Tabletop @relation(fields: [tabletopId], references: [id])

  @@map("tabletop_location")
}

model TabletopType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  Tabletop Tabletop[]

  @@map("tabletop_type")
}

model TabletopSystem {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  Tabletop Tabletop[]

  @@map("tabletop_system")
}

model TabletopLanguage {
  id         Int    @id @default(autoincrement())
  tabletopId String @map("tabletop_id") @db.VarChar(50)
  languageId Int    @map("language_id")

  tabletop Tabletop @relation(fields: [tabletopId], references: [id])
  language Language @relation(fields: [languageId], references: [id])

  @@map("tabletop_language")
}

model Language {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  tabletopLanguage TabletopLanguage[]
  playerLanguage   PlayerLanguage[]

  @@map("language")
}

model Files {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(100)
  key       String    @unique @db.VarChar(100)
  path      String?   @db.VarChar(100)
  type      FileType?
  createdAt DateTime  @default(now()) @map("created_at")

  player      Player[]
  chatMessage ChatMessage[]

  avatarFile Tabletop[] @relation("avatarFile")
  coverFile  Tabletop[] @relation("coverFile")

  @@map("files")
}

model City {
  id        String @id @db.VarChar(20)
  uf        String @db.VarChar(2)
  name      String @db.VarChar(100)
  countryId String @db.VarChar(20)

  state   State   @relation(fields: [uf], references: [uf])
  country Country @relation(fields: [countryId], references: [id])

  player           Player[]
  tabletopLocation TabletopLocation[]

  @@index([id, uf])
  @@map("cities")
}

model State {
  id        String @id @db.VarChar(20)
  uf        String @unique @db.VarChar(2)
  name      String @db.VarChar(100)
  countryId String @db.VarChar(20)

  country          Country            @relation(fields: [countryId], references: [id])
  city             City[]
  tabletopLocation TabletopLocation[]

  @@index([uf])
  @@map("states")
}

model Country {
  id       String @id @db.VarChar(20)
  name     String @db.VarChar(100)
  fullName String @map("full_name") @db.VarChar(100)

  player           Player[]
  city             City[]
  tabletopLocation TabletopLocation[]
  State            State[]

  @@map("countries")
}

model OnlineGamePlataform {
  id   Int     @id @default(autoincrement())
  name String? @db.VarChar(100)

  tabletop Tabletop[]

  @@map("online_game_plataform")
}

model Timezone {
  id       Int     @id @default(autoincrement())
  timezone String? @db.VarChar(50)
  utc      String? @db.VarChar(20)
  name     String? @db.VarChar(100)

  tabletop Tabletop[]

  @@map("timezone")
}
